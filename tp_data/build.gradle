import java.sql.DriverManager

def generatedDbChangeLogFile="db.change.log.generated.xml"
def dbUserName="tpuser"
def dbPassword="tppasswd"
def dbUrl="jdbc:postgresql://127.0.0.1:5432/bpaldb3"
def masterChangeLogPath="resources/db/changelog/1/db.changelog-master.xml"


configurations {
    liquibase
    sqlDriver
}

dependencies {
//    compile "com.twilio.sdk:twilio-java-sdk:3.4.5"
    compile 'joda-time:joda-time:2.7'

    liquibase 'postgresql:postgresql:9.1-901-1.jdbc4'
    liquibase 'org.liquibase:liquibase-core:3.2.2'

    sqlDriver 'postgresql:postgresql:9.1-901-1.jdbc4'
}

task dropAll(type: JavaExec) {
    group = "Liquibase"
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"
    args "--username=${dbUserName}"
    args "--password=${dbPassword}"
    args "--url=${dbUrl}"
    args "--driver=org.postgresql.Driver"
    args "dropAll"
}

task generateFromDb(type: JavaExec) {
    group = "Liquibase"
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"
    args "--changeLogFile=${generatedDbChangeLogFile}"
    args "--username=${dbUserName}"
    args "--password=${dbPassword}"
    args "--url=${dbUrl}"
    args "--driver=org.postgresql.Driver"
    args "generateChangeLog"
}

task updateDb(type: JavaExec) {
    group = "Liquibase"
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"
    args "--changeLogFile=${masterChangeLogPath}"
    args "--username=${dbUserName}"
    args "--password=${dbPassword}"
    args "--url=${dbUrl}"
    args "--driver=org.postgresql.Driver"
    args "--logLevel=debug"
    args "--defaultSchemaName=public"
    args "update"
}



task cleanUpDb << {

    configurations.sqlDriver.each { file ->
        if(file.getName().contains("postgresql")) {
            println "Adding URL: $file"
            gradle.class.classLoader.addURL(file.toURI().toURL())
        }
    }

    def sql = groovy.sql.Sql.newInstance(
            dbUrl,
            dbUserName,
            dbPassword,
            'org.postgresql.Driver'
    )
    sql.execute 'DROP FUNCTION upd_timestamp()'
}

cleanUpDb.dependsOn dropAll
